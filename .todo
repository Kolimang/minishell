## To do :

[ ] Merge de ns branches
		\_ [v] Merge branches tokenize2 && expanderr (avec 2 -r)
		\_ [v] Delete branch expander (with one final -r)

[WiP] Tokenization:
		\_ [v] Fix bugs
				\_ [v] commande <f_ ok mais commande <f__ plante ('_' etant un espace, pas un underscore)
				\_ [v] commande <f c donne < c, le f token f disparait!
		[WiP] split at pipes and handle command by command (lexer->parsing->exec)
		\_ [wip] Heredoc implementation
				\_ [ ] handle heredocs with <<- operator (requires adapting find_delim() function)
				\_ [v] handle multiple heredoc-inputs (cat <<eo >f | cat <<eo >>f)
				\_ [v] send heredoc lexemes to expansion
				\_ /!\ heredoc input lines should not update command history !
		\_ [v] Fix undesired whitespace in "lina"'bouma'
		\_ [v] Handle correctly whether there is a space separating two tokens or not. Ex: echo "$HOME"test /// echo $"USER"
		\_ [v] Fix crash with ft_strncmp in lex_handle_heredoc (null adress)
		\_ [v] Norm: splitter la fonction tokenize en plein de fonctions
		\_ [v] Gerer les operateurs : <, << (heredoc), >, >> (append), | (pipe)
		\_ [ ] Gerer dash et double dash pour les options ?
		\_ [ ] Gerer les chemins de fichier (par exemple vers l'executable a executer ou vers fichier i/o)
		\_ [ ] tokenize.c : Protect values returned from ft_substr/ft_strtrim (which are malloced, protect all the way back up to exiting the main)

[ ] Parsing :
		\_ [wip] For each command, go from lexeme-linked-list list to cmd-struct.
		\_ [ ] Handle multiple input files/heredoc (delimiters) or multiple outputs/appends for a single command

[ ] Exec :
		\_ [ ] pipe a une taille limitee, passer en un bloc bcp de donnees ne fonctionne pas (tester avec un gros fichier) : il faut lire et ecrire en meme temps, et supprimer ce 
		qu'on a deja lu

[ ] Built-ins :

[ ] Gestion des erreurs :
		\_ [ ] Vérifier valeurs de retours
		\_ [ ] Vérifier messages d'erreur

[ ] Finalization :
		\_ [ ] Remove wildcards from Makefile and reference all file names

[ ] Testing :
		\_ [ ] CAS CHIANTS !!! 
				\_ [ ] echo hello >1 >>2 >3
				\_ [ ] cat <<eof <file1 >file2 [VS] cat <file1 <<eof >file2
						--> faire des listes chainees pour les input/output, pour pouvoir supprimer les noeuds/files/fd dejas traites
						--> plus faire une t_list pour les input et une autre pour les output ou chaque noeud contient juste un caractere 
						(par exemple, pour les inputs, f pour file, h pour heredoc)
				\_ [ ] cat <<eof | (donne un prompt pour le heredoc suivi d'un prompt pour completer la commande... qu'on peut terminer par un pipe, et rebelote)
				\_ [ ] cat (donne un prompt pour completer la commande, comme qd la commande se termine par un pipe, ET PUIS CA LOOPE jusqu'a Ctrl-D ou Ctrl-C)
		\_ [ ] space then enter
		\_ [ ] pipe alone // space pipe // multiple spaces pipe // command beginning by a pipe (| echo hello)
		\_ [ ] zut | echo hello
		\_ [ ] <<eof
		\_ [ ] << eof | ls
		\_ [ ] zut | ls
		\_ [ ] echo (passe une ligne avant de rendre le prompt)
		\_ [ ] [Gérer ?] echo hey >&1 (ok, = stdout) [VS] echo hey >& 1 (ok, = stdout) [VS] echo hey > &1 (syntax error near unexpected token `&')
