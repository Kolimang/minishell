#include <minishell.h>

void	array_str_free(char **array, int limit)
{
	int	i;

	if (!array)
		return ;
	i = -1;
	while (++i < limit)
	{
		free(array[i]);
	}
	free(array);
}

static int	update_pwd(char *dest_path, char *curr_path, t_env *env)
{
	t_env	*head;

	if (!env)
		return (1);
	head = env;
	while (head)
	{
		if (ft_strncmp(head->var_name, "PWD", 4) == 0)
		{
			if (head->var_val)
				free(head->var_val);
			head->var_val = ft_strdup(dest_path);
		}
		if (ft_strncmp(head->var_name, "OLDPWD", 7) == 0)
		{
			if (head->var_val)
				free(head->var_val);
			head->var_val = ft_strdup(curr_path);
		}
		head = head->next;
	}
	return (0);
}

static int	go_home(char *dest_path, char *curr_path, t_env *env)
{
	t_env	*head;

	if (!env)
		return (ft_putstr_fd("cd: HOME not set\n", 2), 1);
	head = env;
	while (head)
	{
		if (ft_strncmp(head->var_name, "HOME", 5) == 0)
		{
			dest_path = head->var_val;
			if (!dest_path || dest_path[0] == '\0')
				return (ft_putstr_fd("cd: HOME not set\n", 2), 1);
			if (access(dest_path, R_OK) == 0)
			{
				curr_path = getcwd(NULL, 0);
				chdir((const char *)dest_path);
				return (update_pwd(dest_path, curr_path, env), 0);
			}
			return (ft_putstr_fd("cd: Permission denied\n", 2), 1);
		}
		head = head->next;
	}
	return (ft_putstr_fd("cd: HOME not set\n", 2), 1);
}

static int	go_prev(char *dest_path, char *curr_path, t_env *env)
{
	t_env	*head;

	if (!env)
		return (ft_putstr_fd("cd: OLDPWD not set\n", 2), 1);
	head = env;
	while (head)
	{
		if (ft_strncmp(head->var_name, "OLDPWD", 7) == 0)
		{
			dest_path = head->var_val;
			if (!dest_path || dest_path[0] == '\0')
				return (ft_putstr_fd("cd: OLDPWD not set\n", 2), 1);
			if (access(dest_path, R_OK) == 0)
			{
				curr_path = getcwd(NULL, 0);
				chdir((const char *)dest_path);
				ft_printf("%s\n", dest_path);
				return (update_pwd(dest_path, curr_path, env), 0);
			}
			return (ft_putstr_fd("cd: Permission denied\n", 2), 1);
		}
		head = head->next;
	}
	return (ft_putstr_fd("cd: OLDPWD not set\n", 2), 1);
}

static int	go(char *dest_path, char *curr_path, t_env *env)
{
	if (!dest_path || dest_path[0] == '\0' || access(dest_path, F_OK) != 0)
		return (ft_putstr_fd("cd: No such file or directory\n", 2), 1);
	else if (access(dest_path, R_OK) != 0)
		return (ft_putstr_fd("cd: Permission denied\n", 2), 1);
	else
	{
		curr_path = getcwd(NULL, 0);
		chdir((const char *)dest_path);
		free(dest_path);
		dest_path = getcwd(NULL, 0);
	}
	return (update_pwd(dest_path, curr_path, env), 0);
}

int	ft_cd(char **args, t_env *env)
{
	char	*curr_path;
	char	*dest_path;
	int		argc;
	int		res;

	res = 0;
	dest_path = NULL;
	curr_path = NULL;
	argc = ft_arraylen(args);
	if (argc == 1 || (argc == 2 && ft_strncmp(args[1], "--", 3) == 0)
		|| ft_strncmp(args[1], "~", 2) == 0)
	{
		res = go_home(dest_path, curr_path, env);
	}
	else if (ft_strncmp(args[1], "--", 3) == 0)
		res = go(args[2], curr_path, env);
	else if (ft_strncmp(args[1], "-", 2) == 0)
		res = go_prev(dest_path, curr_path, env);
	else
		res = go(args[1], curr_path, env);
	if (res > 0)
		return (1);
	return (0);
}

int	ft_pwd(char **args, t_env *env)
{
	char	*path;
	t_env	*head;

	if (args && args[1])
		return (ft_putstr_fd("pwd: too many arguments\n", 2), 1);
	if (!env)
		return (1);
	head = env;
	while (head)
	{
		if (ft_strncmp(head->var_name, "PWD", 4) == 0)
		{
			ft_printf("%s\n", head->var_val);
			return (0);
		}
		head = head->next;
	}
	path = getcwd(NULL, 0);
	if (path)
	{
		ft_printf("%s\n", path);
		free(path);
	}
	return (0);
}

int	execute(t_env *env)
{
	char	**args;
	char	*cmd;
	printf("\033[0;38;5;214m=== MiNiSHELL %s ===\033[0m\n\n", VERSION);
	while (1)
	{
		cmd = readline("\033[0;32mminishell$\033[0m ");
		if (!cmd)
			return (1);
		args = ft_split(cmd, ' ');
		if (!ft_strncmp(args[0], "cd", 3))
			ft_cd(args, env);
		else if (!ft_strncmp(args[0], "pwd", 4))
			ft_pwd(args, env);
		array_str_free(args);
	}
	return (0);
}

int	main(int ac, char **av, char **o_env)
{
	t_env		*env;

	(void)ac;
	(void)av;
	env = init_env(o_env);
	if (execute(env))
	{
		free_env(env);
		return (1);
	}
	free_env(env);
	return (0);
}
