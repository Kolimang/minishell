int	main(int ac, char **av, char **o_env)
{
	t_env		*env;// Set up a test environment with some example variables
	t_lexemes	*lexeme1;

	(void)ac;
	(void)av;
	env = init_env(o_env);
	// Create a list of lexemes (tokens) for testing
	lexeme1 = create_lexeme("$a");
	printf("%s\n", getenv("PATH"));
	// t_lexemes *lexeme2 = create_lexeme("\"$12'USER    '   \"");
	// t_lexemes *lexeme3 = create_lexeme("'Literal $USER'");
	// t_lexemes *lexeme4 = create_lexeme("Exit code: $?");
	// t_lexemes *lexeme5 = create_lexeme("\"Mixed $USER and $? quotes\"");

	// Chain lexemes together
	// lexeme1->next = lexeme2;
	// lexeme2->next = lexeme3;
	// lexeme3->next = lexeme4;
	// lexeme4->next = lexeme5;

	// Call expand_lexeme on the lexemes with normal expansion flag
	expand_lexeme(lexeme1, env, 1);
	// expand_lexeme(lexeme2, env, 1);  // Flag 1 for normal expansion
	// Clean up memory
	if (!lexeme1)
		return (1);
	printf("value : %s\n", lexeme1->value);
	printf("str : %s\n", lexeme1->str);
	// printf("lex2 : %s", lexeme2->value);
	cleanup_lexemes(lexeme1);
	//  cleanup_lexemes(lexeme2);
	free_env(env);
	return (0);
}


// Checks if the cmd string is empty, if it is not then it is added to history.
// set SHLVL 
// void	set_shlvl();
// void	ft_add_cmd_to_history(char *cmd)
// {
// 	if (cmd && *cmd)
// 		add_history(cmd);
// }

// int	main(int argc, char **argv)
// {
// 	(void)argc;
// 	(void)argv;
// 	// set_shlvl();
// 	if (execute())
// 		return (execute());
// 	return (0);
// }