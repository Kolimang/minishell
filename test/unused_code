// typedef enum e_tok_type
// {
// 	INFILE = 0,
// 	HERE_DOC,
// 	OUTFILE,
// 	APPEND,	
// }	t_tok_type;

// typedef struct s_list
// {
// 	t_tok_type		type;
// 	char			*name;
// 	char			*hd_delimiter;
// 	struct s_list	*next;
	
// }	t_list;

// typedef struct s_command
// {
// 	int                 pid;//???
// 	int					idx; //??
// 	char                *name;
// 	char                **args;//onlyy args
// 	t_list				*redir;
// 	t_io_fd				*io;
// 	bool				is_pipe;
// 	bool 				is_hrdoc;
// 	struct s_command    *next;
// }	t_command;


t_command	*ft_parse_lexemes(t_list *lexemes, int id, size_t nb_commands)
{
	t_command	*command;
	t_lexemes	*node;
	t_lexemes	*nextnode;
	t_list		*temp;
	int			i;

	command = malloc(sizeof(t_command));
	if (!command)
		return (NULL);
	init_command(command);
	i = 0;
	while (lexemes)
	{
		temp = lexemes;
		node = lexemes->content;
		if (lexemes->next && lexemes->next->content)
			nextnode = lexemes->next->content;
		command->index = id;
		if (ft_strncmp(node->value, "<<", 2) == 0)
		{
			while (lexemes)
			{
				node = lexemes->content;
				if (node->type == 1)
				{
					command->i_heredoc = lexemes;
					break;
				}
				lexemes = lexemes->next;
			}
			lexemes = temp->next;
		}
		else if (ft_strncmp(node->value, ">>", 2) == 0)
		{
			command->o_file_append = nextnode->value;
			lexemes = lexemes->next;
		}
		else if (ft_strncmp(node->value, "<", 1) == 0)
		{
			command->i_file = nextnode->value;
			lexemes = lexemes->next;
		}
		else if (ft_strncmp(node->value, ">", 1) == 0)
		{
			command->o_file = nextnode->value;
			lexemes = lexemes->next;
		}
		else if (ft_strncmp(node->value, "-", 1) == 0)
		{
			command->options = node->value;
		}
		else if (!command->name)
		{
			if (node->type == 0)
				command->name = node->value;
		}
		else if (!command->args)
		{
			if (node->type == 0)
				command->args = node->value;
		}
		lexemes = lexemes->next;
	}
	return (command);
}


// TEST MAIN
// int	main(void)
// {
// 	char	*str;

// 	str = malloc(23 * sizeof(char));
// 	ft_strlcpy(str, "     Hello World!     ", 23);
// 	ft_printf("%s\n", str);
// 	str = ft_strtrim_replace(str);
// 	ft_printf("%s\n", str);
// 	free(str);
// 	return (0);
// }


int	main(int ac, char **av, char **o_env)
{
	t_env		*env;// Set up a test environment with some example variables
	t_lexemes	*lexeme1;

	(void)ac;
	(void)av;
	env = init_env(o_env);
	// Create a list of lexemes (tokens) for testing
	lexeme1 = create_lexeme("$a");
	printf("%s\n", getenv("PATH"));
	// t_lexemes *lexeme2 = create_lexeme("\"$12'USER    '   \"");
	// t_lexemes *lexeme3 = create_lexeme("'Literal $USER'");
	// t_lexemes *lexeme4 = create_lexeme("Exit code: $?");
	// t_lexemes *lexeme5 = create_lexeme("\"Mixed $USER and $? quotes\"");

	// Chain lexemes together
	// lexeme1->next = lexeme2;
	// lexeme2->next = lexeme3;
	// lexeme3->next = lexeme4;
	// lexeme4->next = lexeme5;

	// Call expand_lexeme on the lexemes with normal expansion flag
	expand_lexeme(lexeme1, env, 1);
	// expand_lexeme(lexeme2, env, 1);  // Flag 1 for normal expansion
	// Clean up memory
	if (!lexeme1)
		return (1);
	printf("value : %s\n", lexeme1->value);
	printf("str : %s\n", lexeme1->str);
	// printf("lex2 : %s", lexeme2->value);
	cleanup_lexemes(lexeme1);
	//  cleanup_lexemes(lexeme2);
	free_env(env);
	return (0);
}


// Checks if the cmd string is empty, if it is not then it is added to history.
// set SHLVL 
// void	set_shlvl();
// void	ft_add_cmd_to_history(char *cmd)
// {
// 	if (cmd && *cmd)
// 		add_history(cmd);
// }

// int	main(int argc, char **argv)
// {
// 	(void)argc;
// 	(void)argv;
// 	// set_shlvl();
// 	if (execute())
// 		return (execute());
// 	return (0);
// }